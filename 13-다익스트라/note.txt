다익스트라

BFS와 유사...
이제 그래프의 간선의 길이(가중치)가 주어진다. BFS로는 풀수가 없는 문제... 출발점으로부터 depth가 더 깊지만 거리가 더 짧을 수가 있기 때문

3가지 아이디어가 중요!
다익스트라 알고리즘 : 그래프상의 두 노드간의 최단거리를 구하는 알고리즘. 가중치는 양수여야 한다.
1. A --(2)--> B --(3)--> C
  BFS 탐색으로 A에서 B로 이동하면서 가중치를 올려준다. B에서 C로 이동하면서 갖고 있는 가중치에 새로운 가중치를 더해준다. 2 + 3
2. A --(2)--> B --(8)--> D
    └--(3)--> C --(6)----┘
 A > B > D : 10
 A > C > D : 9
 A -> D 최단 거리? min(A > B > D, A > C > D)
3. A --(2)---> B ---(9)--> D
   │           │(5)        │
   └---(10)--> C ---(3)----┘
 정답은? A > B C > D : 10
  A  B  C  D
 [0  0  0  0] 
A 기준으로 업데이트
 [0  2  10  0]
B 기준으로 업데이트
 [0  2  7  11]
C 기준으로 업데이트
 [0  2  7  10]

 오염을 막기 위해 현재 노드로부터 가장 가까운(가중치가 낮은) 이웃 노드 순서로 업데이트한다.

다익스트라 -> 아이디어가 쉬운데 연결이 많다.. 단순 BFS로 풀리는 문제 + 가중치 개념 
1. 노드에 거리를 업데이트한다
2. 여러 경로가 있다면 최솟값 비교
3. 거리가 짧은 순서대로 업데이트 해준다 (우선순위 큐를 사용해야 시간복잡도를 줄일 수 있다)

우선순위.. 부모 > 자식 (또는 그 반대)인 이진트리
